// This is your corrected Prisma schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Customer {
  id                String         @id @default(auto()) @map("_id") @db.ObjectId
  firstName         String
  lastName          String
  class             String
  room              String
  building          String
  addresses         Address[]
  phone             String
  email             String         @unique
  voiceMail         String
  password          String
  creditCard        String
  creditCardType    CreditCardType @relation(fields: [creditCardTypeID], references: [id])
  cardExpiration    CardExpiration @relation(fields: [cardExpirationID], references: [id])
  // billingAddress   Address   @relation("billingAddress",fields: [billingAddressId], references: [id])
  // shippingAddress  Address   @relation( "shippingAddress",fields: [shippingAddressId], references: [id])
  dateEntered       DateTime
  dateUpdated       DateTime
  active            Boolean
  deleted           Boolean
  notes             String?
  creditCardTypeID  String         @db.ObjectId
  cardExpirationID  String         @db.ObjectId
  billingAddressId  String         @db.ObjectId
  shippingAddressId String         @db.ObjectId
  Order             Order[]
}

model Address {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  customer   Customer    @relation(fields: [customerId], references: [id])
  customerId String      @db.ObjectId
  street     String
  city       String
  state      String
  postalCode String
  country    String
  type       AddressType @relation(fields: [typeId], references: [id])
  typeId     String      @db.ObjectId
}

model AddressType {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  addresses Address[]
}

model CreditCardType {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  customers Customer[]
}

model CardExpiration {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  month     Int
  year      Int
  customers Customer[]
}

model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  picture     String?
  active      Boolean   @default(true)
  products    Product[]
}

model Shipper {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  companyName String
  phone       String
  orders      Order[]
}

model Payment {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  type    String
  allowed Boolean
  orders  Order[]
}

model Order {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  customer       Customer      @relation(fields: [customerId], references: [id])
  customerId     String        @db.ObjectId
  orderNumber    Int
  payment        Payment       @relation(fields: [paymentId], references: [id])
  paymentId      String        @db.ObjectId
  orderDate      DateTime
  shipDate       DateTime
  requiredDate   DateTime
  shipper        Shipper       @relation(fields: [shipperId], references: [id])
  shipperId      String        @db.ObjectId
  freight        String
  salesTax       Int
  timestamp      DateTime
  transactStatus Boolean
  errLocation    String
  errMsg         String
  fulfilled      Boolean
  deleted        Boolean
  paid           Boolean
  paymentDate    DateTime
  orderDetails   OrderDetail[]
}

model OrderDetail {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  productId String   @db.ObjectId
  price     Int
  quantity  Int
  discount  Int
  total     Int
  fulfilled Boolean
  shipDate  DateTime
  billDate  DateTime
}

model Product {
  id               String        @id @default(auto()) @map("_id") @db.ObjectId
  sku              String        @default(uuid())
  // vendorProductId   String
  name             String
  description      String
  supplier         Supplier      @relation(fields: [supplierId], references: [id])
  supplierId       String        @db.ObjectId
  category         Category      @relation(fields: [categoryId], references: [id])
  categoryId       String        @db.ObjectId
  quantityPerUnit  Int
  unitPrice        Int
  msrp             Int
  availableSize    String[]
  availableColors  String[]
  size             String
  color            String
  discount         Int
  unitWeight       Int
  unitInStock      Boolean
  unitsOnOrder     Int?
  reorderLevel     Int
  productAvailable Boolean
  // discountAvailable Int?
  currentOrder     Int?
  picture          String[]
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  ranking          Float?
  notes            String?
  OrderDetail      OrderDetail[]
}

model Supplier {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  companyName       String
  contactName       String
  contactTitle      String?
  address           String?
  city              String?
  region            String?
  postalCode        String?
  country           String?
  phone             String
  fax               String?
  homePage          String?
  email             String    @unique
  password          String
  url               String?
  paymentMethod     String?
  discountType      String?
  typeGoods         String?
  discountAvailable Int?
  currentOrder      Int?
  picture           String?
  ranking           Float?
  notes             String?
  active            Boolean?  @default(false)
  deleted           Boolean?
  dateCreated       DateTime  @default(now())
  dateUpdated       DateTime  @updatedAt
  Product           Product[]
}

model Coupon {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  code     String
  discount Int
  active   Boolean @default(true)
}
