// This is your corrected Prisma schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Customer {
  id                Int             @id @default(autoincrement())
  firstName         String
  lastName          String
  class             String
  room              String
  building          String
  addresses         Address[]
  phone             String
  email             String
  voiceMail         String
  password          String
  creditCard        String
  creditCardType    CreditCardType? @relation(fields: [creditCardTypeID], references: [id], map: "customer_creditCardType")
  cardExpiration    CardExpiration? @relation(fields: [cardExpirationID], references: [id], map: "customer_cardExpiration")
  // billingAddress   Address?        @relation("billingAddress",fields: [billingAddressId], references: [id], map: "customer_billingAddress")
  // shippingAddress  Address?        @relation( "shippingAddress",fields: [shippingAddressId], references: [id], map: "customer_shippingAddress")
  dateEntered       DateTime
  dateUpdated       DateTime
  active            Boolean
  deleted           Boolean
  notes             String?
  creditCardTypeID  Int?
  cardExpirationID  Int?
  billingAddressId  Int?
  shippingAddressId Int?
}

model Address {
  id         Int         @id @default(autoincrement())
  customer   Customer    @relation(fields: [customerId], references: [id])
  customerId Int
  street     String
  city       String
  state      String
  postalCode String
  country    String
  type       AddressType @relation(fields: [typeId], references: [id])
  typeId     Int
}

model AddressType {
  id        Int       @id @default(autoincrement())
  name      String
  addresses Address[]
}

model CreditCardType {
  id        Int        @id @default(autoincrement())
  name      String
  customers Customer[]
}

model CardExpiration {
  id        Int        @id @default(autoincrement())
  month     Int
  year      Int
  customers Customer[]
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  picture     String
  active      Boolean
  products    Product[]
}

model Shipper {
  id          Int     @id @default(autoincrement())
  companyName String
  phone       String
  orders      Order[]
}

model Payment {
  id      Int     @id @default(autoincrement())
  type    String
  allowed Boolean
  orders  Order[]
}

model Order {
  id             Int           @id @default(autoincrement())
  // customer       Customer @relation(fields: [customerId], references: [id])
  customerId     Int
  orderNumber    Int
  payment        Payment       @relation(fields: [paymentId], references: [id])
  paymentId      Int
  orderDate      DateTime
  shipDate       DateTime
  requiredDate   DateTime
  shipper        Shipper       @relation(fields: [shipperId], references: [id])
  shipperId      Int
  freight        String
  salesTax       Int
  timestamp      DateTime
  transactStatus Boolean
  errLocation    String
  errMsg         String
  fulfilled      Boolean
  deleted        Boolean
  paid           Boolean
  paymentDate    DateTime
  orderDetails   OrderDetail[]
}

model OrderDetail {
  id        Int      @id @default(autoincrement())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   Int
  // product   Product  @relation(fields: [productId], references: [id])
  productId Int
  price     Int
  quantity  Int
  discount  Int
  total     Int
  fulfilled Boolean
  shipDate  DateTime
  billDate  DateTime
}

model Product {
  id                Int      @id @default(autoincrement())
  sku               String
  vendorProductId   String
  name              String
  description       String
  // supplier          Supplier @relation(fields: [supplierId], references: [id])
  supplierId        Int
  category          Category @relation(fields: [categoryId], references: [id])
  categoryId        Int
  quantityPerUnit   Int
  unitPrice         Int
  msrp              Int
  availableSize     Int
  availableColors   Int
  size              Int
  color             Int
  discount          Int
  unitWeight        Int
  unitInStock       Boolean
  unitsOnOrder      Int
  reorderLevel      Int
  productAvailable  Boolean
  discountAvailable Int
  currentOrder      Int
  picture           String
  ranking           Float
  notes             String?
}

model Supplier {
  id                Int      @id @default(autoincrement())
  companyName       String
  contactName       String
  contactTitle      String
  address           String
  city              String
  region            String
  postalCode        String
  country           String
  phone             String
  fax               String
  homePage          String
  email             String
  url               String
  paymentMethod     String
  discountType      String
  typeGoods         String
  discountAvailable Int
  currentOrder      Int
  picture           String
  ranking           Float
  notes             String?
  active            Boolean
  deleted           Boolean
  dateCreated       DateTime
  dateUpdated       DateTime
}
